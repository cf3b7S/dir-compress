// Generated by CoffeeScript 1.7.1
var async, count, crypto, exclude, exec, fs, getMd5, getVersion, isDir, jsArr, md5UP, minify, modulePath, newRootPath, newRoot_v, oldVersionPath, os, path, rootPath, root_v, uglify, upPackagePath, walk, _;

os = require('os');

path = require('path');

crypto = require('crypto');

async = require('async');

_ = require('underscore');

uglify = require('uglify-js');

fs = require('fs-extra');

exec = require('child_process').exec;

rootPath = '/home/jukin/code/weixing/hairdressing';

newRootPath = '/home/jukin/code/_hairdressing';

modulePath = path.join(newRootPath, 'node_modules');

exclude = ['.git'];

jsArr = [];

count = 0;

_.each(exclude, function(folder, index) {
  return exclude[index] = path.join(newRootPath, folder);
});

minify = function(pathName, callback) {
  var err, result;
  try {
    result = uglify.minify(pathName, {
      mangle: true
    });
    return callback(null, result.code);
  } catch (_error) {
    err = _error;
    return callback(err);
  }
};

isDir = function(pathName) {
  var err;
  try {
    return fs.readdirSync(pathName);
  } catch (_error) {
    err = _error;
    if (err && err.code === 'ENOTDIR') {
      return null;
    } else {
      throw err;
    }
  }
};

walk = function(walkPath) {
  var files;
  files = isDir(walkPath);
  if (files.length) {
    return _.each(files, function(file, index) {
      var coffeePath, dirPath, filePath, jsPath;
      if (!~file.indexOf('.') && file !== 'node_modules') {
        dirPath = path.join(walkPath, file);
        if (!~_.indexOf(exclude, dirPath) && isDir(dirPath)) {
          return walk(dirPath);
        } else if (!isDir(dirPath)) {
          return console.log(dirPath);
        }
      } else {
        filePath = path.join(walkPath, file);
        console.log(file);
        console.log(getMd5(filePath));
        if (~file.indexOf('.js') && !~file.indexOf('.json') && !~file.indexOf('.min.js')) {
          jsPath = path.join(walkPath, file);
          return jsArr.push(jsPath);
        } else if (~file.indexOf('.coffee')) {
          coffeePath = path.join(walkPath, file);
          return fs.removeSync(coffeePath);
        }
      }
    });
  }
};

getVersion = function(rootPath) {
  var packagePath, pkg;
  packagePath = path.join(rootPath, 'package.json');
  pkg = fs.readFileSync(packagePath, 'utf-8');
  pkg = JSON.parse(pkg);
  return pkg.version;
};

getMd5 = function(filePath) {
  var file, md5, rpath;
  file = fs.readFileSync(filePath, 'utf-8');
  md5 = crypto.createHash('md5').update(file).digest('hex');
  rpath = path.relative(rootPath, filePath);
  return [rpath, md5];
};

if (fs.existsSync(newRootPath)) {
  root_v = getVersion(rootPath);
  newRoot_v = getVersion(newRootPath);
  if (root_v.localeCompare(newRoot_v)) {
    upPackagePath = path.join(rootPath, 'upgrade', root_v);
    oldVersionPath = path.join(newRootPath, 'upgrade', newRoot_v);
    md5UP = {};
    console.log('有更新');
  } else {
    console.log('木有更新');
  }
  console.log('存在');
} else {
  console.log('不存在');
  fs.copySync(rootPath, newRootPath);
  exec('rm -rf ' + modulePath, function(err) {
    if (err) {
      return console.log(err);
    }
  });
  exec('rm -rf ' + modulePath, function(err) {
    if (err) {
      return console.log(err);
    }
  });
}

walk(newRootPath);
