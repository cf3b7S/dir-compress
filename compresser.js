// Generated by CoffeeScript 1.7.1
var async, exec, fs, minify, path, uglify, _;

path = require('path');

exec = require('child_process').exec;

async = require('async');

_ = require('lodash');

uglify = require('uglify-js');

fs = require('fs-extra');

module.exports = {
  compress: function(options) {
    var active, count, exclude, jsArr, motherPath, newRootPath, projectName, removeDir, removeFile, rootPath, tarName, tarPath, walk;
    if (options.rootPath) {
      rootPath = options.rootPath;
      motherPath = path.dirname(rootPath);
      projectName = path.basename(rootPath);
      tarName = projectName + '.tar.gz';
      tarPath = path.join(motherPath, tarName);
      newRootPath = newRootPath || path.join(motherPath, '_' + projectName);
      removeDir = options.removeDir || null;
      removeFile = options.removeFile || null;
      exclude = options.exclude || null;
      active = options.active || null;
      console.log('prepare compress...');
      if (fs.existsSync(newRootPath)) {
        fs.removeSync(newRootPath);
      }
      if (fs.existsSync(tarPath)) {
        fs.removeSync(tarPath);
      }
      fs.copySync(rootPath, newRootPath);
      walk = function(walkPath) {
        var directories, output;
        output = [];
        directories = [];
        _.each(fs.readdirSync(walkPath), function(file, index) {
          var stat;
          newRootPath = path.join(walkPath, file);
          stat = fs.statSync(newRootPath);
          if (stat.isFile()) {
            if (removeFile && removeFile.test(file)) {
              return fs.removeSync(newRootPath);
            } else if (/(.*)\.js$/.test(file)) {
              return output.push(newRootPath);
            } else if (/(.*)\.coffee$/.test(file)) {
              return fs.removeSync(newRootPath);
            }
          } else if (stat.isDirectory()) {
            if (removeDir && removeDir.test(file)) {
              return fs.removeSync(newRootPath);
            } else if (exclude && !exclude.test(file)) {
              return directories.push(newRootPath);
            }
          }
        });
        _.each(directories, function(dir, index) {
          return output = output.concat(walk(dir));
        });
        return output;
      };
      count = 0;
      jsArr = walk(newRootPath);
      return async.whilst(function() {
        return count < jsArr.length;
      }, function(cb) {
        var jsPath;
        jsPath = jsArr[count];
        minify(jsPath, function(err, data) {
          if (!err) {
            return fs.writeFile(jsPath, data, function(err) {
              if (err) {
                return cb(null);
              } else {
                console.log(jsPath + ' compressed');
                return cb(null);
              }
            });
          } else {
            console.log(err);
            throw err;
            console.log(jsPath, ',has sth wrong, and skiped');
            return cb(null);
          }
        });
        return count++;
      }, function(err, result) {
        exec('tar -zcvf ' + tarName + ' ' + ('_' + projectName), {
          cwd: motherPath
        }, function(err) {
          if (!err) {
            return exec('scp hairdressing.tar.gz ucloud:/home/ubuntu', {
              cwd: motherPath
            }, function(err) {
              if (!err) {
                return console.log('upload success');
              } else {
                return console.log(err);
              }
            });
          } else {
            return console.log(err);
          }
        });
        return console.log('finish compress');
      });
    } else {
      return console.log('参数错误');
    }
  }
};

minify = function(pathName, callback) {
  var err, result;
  try {
    result = uglify.minify(pathName, {
      mangle: true
    });
    return callback(null, result.code);
  } catch (_error) {
    err = _error;
    return callback(err);
  }
};
